package com.xxx.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xxx.bean.SchoolBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table user.
*/
public class SchoolBeanDao extends AbstractDao<SchoolBean, String> {

    public static final String TABLENAME = "user";

    /**
     * Properties of entity SchoolBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property S_id = new Property(0, String.class, "s_id", true, "S_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
    };


    public SchoolBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SchoolBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'user' (" + //
                "'S_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: s_id
                "'NAME' TEXT);"); // 1: name
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_user_S_ID ON user" +
                " (S_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'user'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SchoolBean entity) {
        stmt.clearBindings();
 
        String s_id = entity.getS_id();
        if (s_id != null) {
            stmt.bindString(1, s_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SchoolBean readEntity(Cursor cursor, int offset) {
        SchoolBean entity = new SchoolBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // s_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SchoolBean entity, int offset) {
        entity.setS_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SchoolBean entity, long rowId) {
        return entity.getS_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SchoolBean entity) {
        if(entity != null) {
            return entity.getS_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
